The operators that works at Bit level are called bitwise operators. In general there are six types of Bitwise Operators as described below:

1.  & (bitwise AND) Takes two numbers as operands and does AND on every bit of two numbers. The result of AND is 1 only if both bits are 1. Suppose A = 5 and B = 3, therefore A & B = 1.
2.  | (bitwise OR) Takes two numbers as operands and does OR on every bit of two numbers. The result of OR is 1 if any of the two bits is 1. Suppose A = 5 and B = 3, therefore A | B = 7.
3.  ^ (bitwise XOR) Takes two numbers as operands and does XOR on every bit of two numbers. The result of XOR is 1 if the two bits are different. Suppose A = 5 and B = 3, therefore A ^ B = 6.
4.  << (left shift) Takes two numbers, left shifts the bits of the first operand, the second operand decides the number of places to shift.
5.  >> (right shift) Takes two numbers, right shifts the bits of the first operand, the second operand decides the number of places to shift.
6.  ~ (bitwise NOT) Takes one number and inverts all bits of it. Suppose A = 5, therefore ~A = 2.

IMPORTANT:

The bitwise XOR operator is the most useful operator from technical interview perspective.
In c++ we dont have standadized size for int, so it can be 32 bits or 64 bits or even in some cases 16 bits(usually in old machines).
The left shift and right shift operators cannot be used with negative numbers.
