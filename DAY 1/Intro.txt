Introduction To Basics of Algorithms:

Analysis of Algorithm:
Time of execution depends on machine, so if your algo is faster but you're running it on a slower machine then your friend whose algo is slower but has a faster machine, will execute it in lesser time for low values of n.

Order of Growth:
Limitations, we always consider n tends to inifinity, however in practical, it might never reach that value.
Asymptotic notations are mathematical tools to represent the time complexity of algorithms for asymptotic analysis.

1.  Θ Notation: The theta notation bounds a functions from above and below, so it defines exact asymptotic behavior.
For a given function g(n), we denote Θ(g(n)) is following set of functions.
Θ(g(n)) = {f(n): there exist positive constants c1, c2 and n0 such 

                 that 0 <= c1*g(n) <= f(n) <= c2*g(n) for all n >= n0}
                 
2.  Big O Notation: The Big O notation defines an upper bound of an algorithm, it bounds a function only from above.
The Big O notation is useful when we only have upper bound on time complexity of an algorithm. Many times we easily find an upper bound by simply looking at the algorithm.
O(g(n)) = { f(n): there exist positive constants c and 

                  n0 such that 0 <= f(n) <= c*g(n) for 

                  all n >= n0}

3. Ω Notation: Just as Big O notation provides an asymptotic upper bound on a function, Ω notation provides an asymptotic lower bound.
For a given function g(n), we denote by Ω(g(n)) the set of functions.
Ω (g(n)) = {f(n): there exist positive constants c and

                  n0 such that 0 <= c*g(n) <= f(n) for

                  all n >= n0}.
    
    
Time Complexities:

1. Worst Case Analysis (Usually Done) In the worst case analysis, we calculate upper bound on running time of an algorithm. We must know the case that causes the maximum number of operations to be executed
2. Average Case Analysis (Sometimes done) In average case analysis, we take all possible inputs and calculate computing time for all of the inputs. Sum all the calculated values and divide the sum by total number of inputs. We must know (or predict) distribution of cases.
3. Best Case Analysis (Bogus) : In the best case analysis, we calculate lower bound on running time of an algorithm. We must know the case that causes minimum number of operations to be executed.

Direct way to analyse Time complexities:

c<loglogn<lonn<n^1/3<n^1/2<n<n^2<n^3<n^4<2^n<n^n




